#include <iostream>
#include <fstream>
#include <stdio.h>
#include <time.h>
#include <functional>
#include <map>
#include "pico/stdlib.h"
#include "ss_oled.hpp"

// RPI Pico
#define SDA_PIN 14
#define SCL_PIN 15
#define PICO_I2C i2c1
#define I2C_SPEED 100 * 1000

#define OLED_WIDTH 128
#define OLED_HEIGHT 64
uint8_t rom[] = {
   0x12,0x25,0x53,0x50,0x41,0x43,0x45,0x20,0x49,0x4E,0x56,0x41,0x44,0x45,0x52,
0x53,0x20,0x76,0x30,0x2E,0x39,0x20,0x42,0x79,0x20,0x44,0x61,0x76,0x69,0x64,
0x20,0x57,0x49,0x4E,0x54,0x45,0x52,0x60,0x0,0x61,0x0,0x62,0x8,0xA3,0xD3,
0xD0,0x18,0x71,0x8,0xF2,0x1E,0x31,0x20,0x12,0x2D,0x70,0x8,0x61,0x0,0x30,
0x40,0x12,0x2D,0x69,0x5,0x6C,0x15,0x6E,0x0,0x23,0x87,0x60,0xA,0xF0,0x15,
0xF0,0x7,0x30,0x0,0x12,0x4B,0x23,0x87,0x7E,0x1,0x12,0x45,0x66,0x0,0x68,
0x1C,0x69,0x0,0x6A,0x4,0x6B,0xA,0x6C,0x4,0x6D,0x3C,0x6E,0xF,0x0,0xE0,
0x23,0x6B,0x23,0x47,0xFD,0x15,0x60,0x4,0xE0,0x9E,0x12,0x7D,0x23,0x6B,0x38,
0x0,0x78,0xFF,0x23,0x6B,0x60,0x6,0xE0,0x9E,0x12,0x8B,0x23,0x6B,0x38,0x39,
0x78,0x1,0x23,0x6B,0x36,0x0,0x12,0x9F,0x60,0x5,0xE0,0x9E,0x12,0xE9,0x66,
0x1,0x65,0x1B,0x84,0x80,0xA3,0xCF,0xD4,0x51,0xA3,0xCF,0xD4,0x51,0x75,0xFF,
0x35,0xFF,0x12,0xAD,0x66,0x0,0x12,0xE9,0xD4,0x51,0x3F,0x1,0x12,0xE9,0xD4,
0x51,0x66,0x0,0x83,0x40,0x73,0x3,0x83,0xB5,0x62,0xF8,0x83,0x22,0x62,0x8,
0x33,0x0,0x12,0xC9,0x23,0x73,0x82,0x6,0x43,0x8,0x12,0xD3,0x33,0x10,0x12,
0xD5,0x23,0x73,0x82,0x6,0x33,0x18,0x12,0xDD,0x23,0x73,0x82,0x6,0x43,0x20,
0x12,0xE7,0x33,0x28,0x12,0xE9,0x23,0x73,0x3E,0x0,0x13,0x7,0x79,0x6,0x49,
0x18,0x69,0x0,0x6A,0x4,0x6B,0xA,0x6C,0x4,0x7D,0xF4,0x6E,0xF,0x0,0xE0,
0x23,0x47,0x23,0x6B,0xFD,0x15,0x12,0x6F,0xF7,0x7,0x37,0x0,0x12,0x6F,0xFD,
0x15,0x23,0x47,0x8B,0xA4,0x3B,0x12,0x13,0x1B,0x7C,0x2,0x6A,0xFC,0x3B,0x2,
0x13,0x23,0x7C,0x2,0x6A,0x4,0x23,0x47,0x3C,0x18,0x12,0x6F,0x0,0xE0,0xA4,
0xD3,0x60,0x14,0x61,0x8,0x62,0xF,0xD0,0x1F,0x70,0x8,0xF2,0x1E,0x30,0x2C,
0x13,0x33,0xF0,0xA,0x0,0xE0,0xA6,0xF4,0xFE,0x65,0x12,0x25,0xA3,0xB7,0xF9,
0x1E,0x61,0x8,0x23,0x5F,0x81,0x6,0x23,0x5F,0x81,0x6,0x23,0x5F,0x81,0x6,
0x23,0x5F,0x7B,0xD0,0x0,0xEE,0x80,0xE0,0x80,0x12,0x30,0x0,0xDB,0xC6,0x7B,
0xC,0x0,0xEE,0xA3,0xCF,0x60,0x1C,0xD8,0x4,0x0,0xEE,0x23,0x47,0x8E,0x23,
0x23,0x47,0x60,0x5,0xF0,0x18,0xF0,0x15,0xF0,0x7,0x30,0x0,0x13,0x7F,0x0,
0xEE,0x6A,0x0,0x8D,0xE0,0x6B,0x4,0xE9,0xA1,0x12,0x57,0xA6,0x2,0xFD,0x1E,
0xF0,0x65,0x30,0xFF,0x13,0xA5,0x6A,0x0,0x6B,0x4,0x6D,0x1,0x6E,0x1,0x13,
0x8D,0xA5,0x0,0xF0,0x1E,0xDB,0xC6,0x7B,0x8,0x7D,0x1,0x7A,0x1,0x3A,0x7,
0x13,0x8D,0x0,0xEE,0x3C,0x7E,0xFF,0xFF,0x99,0x99,0x7E,0xFF,0xFF,0x24,0x24,
0xE7,0x7E,0xFF,0x3C,0x3C,0x7E,0xDB,0x81,0x42,0x3C,0x7E,0xFF,0xDB,0x10,0x38,
0x7C,0xFE,0x0,0x0,0x7F,0x0,0x3F,0x0,0x7F,0x0,0x0,0x0,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x0,0x0,0x3F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x3F,0x8,0x8,0xFF,0x0,0x0,0xFE,0x0,0xFC,0x0,0xFE,0x0,0x0,0x0,0x7E,
0x42,0x42,0x62,0x62,0x62,0x62,0x0,0x0,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0xFF,0x0,0x0,0xFF,0x0,0x7D,0x0,0x41,0x7D,0x5,0x7D,0x7D,0x0,
0x0,0xC2,0xC2,0xC6,0x44,0x6C,0x28,0x38,0x0,0x0,0xFF,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xFF,0x0,0x0,0xFF,0x0,0xF7,0x10,0x14,0xF7,0xF7,0x4,
0x4,0x0,0x0,0x7C,0x44,0xFE,0xC2,0xC2,0xC2,0xC2,0x0,0x0,0xFF,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0x0,0x0,0xFF,0x0,0xEF,0x20,0x28,0xE8,
0xE8,0x2F,0x2F,0x0,0x0,0xF9,0x85,0xC5,0xC5,0xC5,0xC5,0xF9,0x0,0x0,0xFF,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0x0,0x0,0xFF,0x0,0xBE,0x0,
0x20,0x30,0x20,0xBE,0xBE,0x0,0x0,0xF7,0x4,0xE7,0x85,0x85,0x84,0xF4,0x0,
0x0,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0x0,0x0,0xFF,0x0,
0x0,0x7F,0x0,0x3F,0x0,0x7F,0x0,0x0,0x0,0xEF,0x28,0xEF,0x0,0xE0,0x60,
0x6F,0x0,0x0,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0x0,0x0,
0xFF,0x0,0x0,0xFE,0x0,0xFC,0x0,0xFE,0x0,0x0,0x0,0xC0,0x0,0xC0,0xC0,
0xC0,0xC0,0xC0,0x0,0x0,0xFC,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0xFC,
0x10,0x10,0xFF,0xF9,0x81,0xB9,0x8B,0x9A,0x9A,0xFA,0x0,0xFA,0x8A,0x9A,0x9A,
0x9B,0x99,0xF8,0xE6,0x25,0x25,0xF4,0x34,0x34,0x34,0x0,0x17,0x14,0x34,0x37,
0x36,0x26,0xC7,0xDF,0x50,0x50,0x5C,0xD8,0xD8,0xDF,0x0,0xDF,0x11,0x1F,0x12,
0x1B,0x19,0xD9,0x7C,0x44,0xFE,0x86,0x86,0x86,0xFC,0x84,0xFE,0x82,0x82,0xFE,
0xFE,0x80,0xC0,0xC0,0xC0,0xFE,0xFC,0x82,0xC2,0xC2,0xC2,0xFC,0xFE,0x80,0xF8,
0xC0,0xC0,0xFE,0xFE,0x80,0xF0,0xC0,0xC0,0xC0,0xFE,0x80,0xBE,0x86,0x86,0xFE,
0x86,0x86,0xFE,0x86,0x86,0x86,0x10,0x10,0x10,0x10,0x10,0x10,0x18,0x18,0x18,
0x48,0x48,0x78,0x9C,0x90,0xB0,0xC0,0xB0,0x9C,0x80,0x80,0xC0,0xC0,0xC0,0xFE,
0xEE,0x92,0x92,0x86,0x86,0x86,0xFE,0x82,0x86,0x86,0x86,0x86,0x7C,0x82,0x86,
0x86,0x86,0x7C,0xFE,0x82,0xFE,0xC0,0xC0,0xC0,0x7C,0x82,0xC2,0xCA,0xC4,0x7A,
0xFE,0x86,0xFE,0x90,0x9C,0x84,0xFE,0xC0,0xFE,0x2,0x2,0xFE,0xFE,0x10,0x30,
0x30,0x30,0x30,0x82,0x82,0xC2,0xC2,0xC2,0xFE,0x82,0x82,0x82,0xEE,0x38,0x10,
0x86,0x86,0x96,0x92,0x92,0xEE,0x82,0x44,0x38,0x38,0x44,0x82,0x82,0x82,0xFE,
0x30,0x30,0x30,0xFE,0x2,0x1E,0xF0,0x80,0xFE,0x0,0x0,0x0,0x0,0x6,0x6,
0x0,0x0,0x0,0x60,0x60,0xC0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x18,
0x18,0x0,0x18,0x7C,0xC6,0xC,0x18,0x0,0x18,0x0,0x0,0xFE,0xFE,0x0,0x0,
0xFE,0x82,0x86,0x86,0x86,0xFE,0x8,0x8,0x8,0x18,0x18,0x18,0xFE,0x2,0xFE,
0xC0,0xC0,0xFE,0xFE,0x2,0x1E,0x6,0x6,0xFE,0x84,0xC4,0xC4,0xFE,0x4,0x4,
0xFE,0x80,0xFE,0x6,0x6,0xFE,0xC0,0xC0,0xC0,0xFE,0x82,0xFE,0xFE,0x2,0x2,
0x6,0x6,0x6,0x7C,0x44,0xFE,0x86,0x86,0xFE,0xFE,0x82,0xFE,0x6,0x6,0x6,
0x44,0xFE,0x44,0x44,0xFE,0x44,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0x6C,0x5A,
0x0,0xC,0x18,0xA8,0x30,0x4E,0x7E,0x0,0x12,0x18,0x66,0x6C,0xA8,0x5A,0x66,
0x54,0x24,0x66,0x0,0x48,0x48,0x18,0x12,0xA8,0x6,0x90,0xA8,0x12,0x0,0x7E,
0x30,0x12,0xA8,0x84,0x30,0x4E,0x72,0x18,0x66,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,
0x90,0x54,0x78,0xA8,0x48,0x78,0x6C,0x72,0xA8,0x12,0x18,0x6C,0x72,0x66,0x54,
0x90,0xA8,0x72,0x2A,0x18,0xA8,0x30,0x4E,0x7E,0x0,0x12,0x18,0x66,0x6C,0xA8,
0x72,0x54,0xA8,0x5A,0x66,0x18,0x7E,0x18,0x4E,0x72,0xA8,0x72,0x2A,0x18,0x30,
0x66,0xA8,0x30,0x4E,0x7E,0x0,0x6C,0x30,0x54,0x4E,0x9C,0xA8,0xA8,0xA8,0xA8,
0xA8,0xA8,0xA8,0x48,0x54,0x7E,0x18,0xA8,0x90,0x54,0x78,0x66,0xA8,0x6C,0x2A,
0x30,0x5A,0xA8,0x84,0x30,0x72,0x2A,0xA8,0xD8,0xA8,0x0,0x4E,0x12,0xA8,0xE4,
0xA2,0xA8,0x0,0x4E,0x12,0xA8,0x6C,0x2A,0x54,0x54,0x72,0xA8,0x84,0x30,0x72,
0x2A,0xA8,0xDE,0x9C,0xA8,0x72,0x2A,0x18,0xA8,0xC,0x54,0x48,0x5A,0x78,0x72,
0x18,0x66,0xA8,0x72,0x18,0x42,0x42,0x6C,0xA8,0x72,0x2A,0x0,0x72,0xA8,0x72,
0x2A,0x18,0xA8,0x30,0x4E,0x7E,0x0,0x12,0x18,0x66,0x6C,0xA8,0x30,0x4E,0xC,
0x66,0x18,0x0,0x6C,0x18,0xA8,0x72,0x2A,0x18,0x30,0x66,0xA8,0x1E,0x54,0x66,
0xC,0x18,0x9C,0xA8,0x24,0x54,0x54,0x12,0xA8,0x42,0x78,0xC,0x3C,0xA8,0xAE,
0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
uint8_t fontset[80] =
    {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

class chip8
{
public:
    chip8();
    uint8_t get_x(uint16_t);
    uint8_t get_y(uint16_t);
    void execute();
    void draw(picoSSOLED &oled);
    void i_0xee();
    void i_1nnn(uint16_t);
    void i_2nnn(uint16_t);
    void i_3xkk(uint16_t);
    void i_4xkk(uint16_t);
    void i_5xy0(uint16_t);
    void i_6xkk(uint16_t);
    void i_7xkk(uint16_t);
    void i_8xy0(uint16_t);
    void i_8xy1(uint16_t);
    void i_8xy2(uint16_t);
    void i_8xy3(uint16_t);
    void i_8xy4(uint16_t);
    void i_8xy5(uint16_t);
    void i_8xy6(uint16_t);
    void i_8xy7(uint16_t);
    void i_8xye(uint16_t);
    void i_9xy0(uint16_t);
    void i_annn(uint16_t);
    void i_bnnn(uint16_t);
    void i_cxkk(uint16_t);
    void i_dxyn(uint16_t);
    void i_ex9e(uint16_t);
    void i_exa1(uint16_t);

    void i_fx07(uint16_t);
    void i_fx0a(uint16_t);
    void i_fx15(uint16_t);
    void i_fx1e(uint16_t);
    void i_fx29(uint16_t);
    void i_fx33(uint16_t);
    void i_fx55(uint16_t);
    void i_fx65(uint16_t);
    bool draw_flag = true;
    char wait_key = -1;

    uint8_t dt, st;
    uint8_t v[16];

private:
    void clear_screen();
    bool update_pc = true;
    uint8_t ram[4096];
    uint16_t stack[16];
    uint16_t pc, sp;
    uint16_t I;
    uint8_t gfx[32][64];
    std::map<uint16_t, std::function<void(uint16_t)>> opcodes;
};
chip8::chip8()
{

    for (int i = 0; i < sizeof(rom) / (sizeof(uint8_t)); i++)
    {
        ram[i + 512] = rom[i];
    }

    for (int i = 0; i < 80; i++)
    {
        ram[i + 0x50] = fontset[i];
    }
    for (int i = 0; i < 16; i++)
    {
        v[i] = 0;
        stack[i] = 0;
    }
    clear_screen();
    dt = 0;
    pc = 512;
    sp = 0;
    I = 0;
    opcodes[0x1] = std::bind(&chip8::i_1nnn, this, std::placeholders::_1);
    opcodes[0x2] = std::bind(&chip8::i_2nnn, this, std::placeholders::_1);
    opcodes[0x3] = std::bind(&chip8::i_3xkk, this, std::placeholders::_1);
    opcodes[0x4] = std::bind(&chip8::i_4xkk, this, std::placeholders::_1);
    opcodes[0x5] = std::bind(&chip8::i_5xy0, this, std::placeholders::_1);
    opcodes[0x6] = std::bind(&chip8::i_6xkk, this, std::placeholders::_1);
    opcodes[0x7] = std::bind(&chip8::i_7xkk, this, std::placeholders::_1);
    opcodes[0x80] = std::bind(&chip8::i_8xy0, this, std::placeholders::_1);
    opcodes[0x81] = std::bind(&chip8::i_8xy1, this, std::placeholders::_1);
    opcodes[0x82] = std::bind(&chip8::i_8xy2, this, std::placeholders::_1);
    opcodes[0x83] = std::bind(&chip8::i_8xy3, this, std::placeholders::_1);
    opcodes[0x84] = std::bind(&chip8::i_8xy4, this, std::placeholders::_1);
    opcodes[0x85] = std::bind(&chip8::i_8xy5, this, std::placeholders::_1);
    opcodes[0x86] = std::bind(&chip8::i_8xy6, this, std::placeholders::_1);
    opcodes[0x87] = std::bind(&chip8::i_8xy7, this, std::placeholders::_1);
    opcodes[0x8E] = std::bind(&chip8::i_8xye, this, std::placeholders::_1);
    opcodes[0x9] = std::bind(&chip8::i_9xy0, this, std::placeholders::_1);
    opcodes[0xA] = std::bind(&chip8::i_annn, this, std::placeholders::_1);
    opcodes[0xB] = std::bind(&chip8::i_bnnn, this, std::placeholders::_1);
    opcodes[0xC] = std::bind(&chip8::i_cxkk, this, std::placeholders::_1);
    opcodes[0xD] = std::bind(&chip8::i_dxyn, this, std::placeholders::_1);
    opcodes[0x9E] = std::bind(&chip8::i_ex9e, this, std::placeholders::_1);
    opcodes[0xA1] = std::bind(&chip8::i_exa1, this, std::placeholders::_1);
    opcodes[0xF07] = std::bind(&chip8::i_fx07, this, std::placeholders::_1);
    opcodes[0xF0A] = std::bind(&chip8::i_fx0a, this, std::placeholders::_1);
    opcodes[0xF15] = std::bind(&chip8::i_fx15, this, std::placeholders::_1);
    opcodes[0xF1E] = std::bind(&chip8::i_fx1e, this, std::placeholders::_1);
    opcodes[0xF29] = std::bind(&chip8::i_fx29, this, std::placeholders::_1);
    opcodes[0xF33] = std::bind(&chip8::i_fx33, this, std::placeholders::_1);
    opcodes[0xF55] = std::bind(&chip8::i_fx55, this, std::placeholders::_1);
    opcodes[0xF65] = std::bind(&chip8::i_fx65, this, std::placeholders::_1);
}
void chip8::draw(picoSSOLED &oled)
{
    for (int i = 0; i < 32; i++)
    {
        for (int j = 0; j < 64; j++)
        {
            if (gfx[i][j] == 1)
            {
                oled.set_pixel(j, i, 1, 1);
            }
        }
    }
}
void chip8::clear_screen()
{
    for (int i = 0; i < 32; i++)
    {
        for (int j = 0; j < 64; j++)
        {
            gfx[i][j] = 0;
        }
    }
}
uint8_t chip8::get_x(uint16_t opcode)
{
    return (opcode & 0xF00) >> 8;
}
uint8_t chip8::get_y(uint16_t opcode)
{
    return (opcode & 0xF0) >> 4;
}
void chip8::i_0xee()
{
    if (sp > 0)
    {
        sp--;
        pc = stack[sp];
    }
}
void chip8::i_1nnn(uint16_t opcode)
{
    pc = opcode & 0xFFF;
}
void chip8::i_2nnn(uint16_t opcode)
{
    stack[sp] = pc;
    sp++;
    pc = opcode & 0xFFF;
}
void chip8::i_3xkk(uint16_t opcode)
{
    if (v[get_x(opcode)] == (opcode & 0xFF))
    {
        pc = (pc + 2) & 0xFFF;
    }
}
void chip8::i_4xkk(uint16_t opcode)
{
    if (v[get_x(opcode)] != (opcode & 0xFF))
    {
        pc = (pc + 2) & 0xFFF;
    }
}
void chip8::i_5xy0(uint16_t opcode)
{
    if (v[get_x(opcode)] == v[get_y(opcode)])
    {
        pc = (pc + 2) & 0xFFF;
    }
}
void chip8::i_6xkk(uint16_t opcode)
{
    v[get_x(opcode)] = opcode & 0xFF;
}
void chip8::i_7xkk(uint16_t opcode)
{
    v[get_x(opcode)] += opcode & 0xFF;
}
void chip8::i_8xy0(uint16_t opcode)
{
    v[get_x(opcode)] = v[get_y(opcode)];
}
void chip8::i_8xy1(uint16_t opcode)
{
    v[get_x(opcode)] |= v[get_y(opcode)];
}
void chip8::i_8xy2(uint16_t opcode)
{
    v[get_x(opcode)] &= v[get_y(opcode)];
}
void chip8::i_8xy3(uint16_t opcode)
{
    v[get_x(opcode)] ^= v[get_y(opcode)];
}
void chip8::i_8xy4(uint16_t opcode)
{
    uint16_t sum = v[get_x(opcode)] + v[get_y(opcode)];
    v[0xF] = sum > 255;
    v[get_x(opcode)] = sum & 0xFF;
}
void chip8::i_8xy5(uint16_t opcode)
{
    v[0xF] = v[get_x(opcode)] > v[get_y(opcode)];
    v[get_x(opcode)] -= v[get_y(opcode)];
}
void chip8::i_8xy6(uint16_t opcode)
{
    v[0xF] = v[get_x(opcode)] & 1;
    v[get_x(opcode)] >>= 1;
}
void chip8::i_8xy7(uint16_t opcode)
{
    v[0xF] = v[get_y(opcode)] > v[get_x(opcode)];
    v[get_x(opcode)] = v[get_y(opcode)] - v[get_x(opcode)];
}
void chip8::i_8xye(uint16_t opcode)
{
    v[0xF] = (v[get_x(opcode)] & 0x80) >> 7;
    v[get_x(opcode)] <<= 1;
}
void chip8::i_9xy0(uint16_t opcode)
{
    if (v[get_x(opcode)] != v[get_y(opcode)])
    {
        pc = (pc + 2) & 0xFFF;
    }
}
void chip8::i_annn(uint16_t opcode)
{
    I = opcode & 0xFFF;
}
void chip8::i_bnnn(uint16_t opcode)
{
    pc = (opcode & 0xFFF) + v[0];
}
void chip8::i_cxkk(uint16_t opcode)
{
    uint8_t random_byte = rand() % 256;
    v[get_x(opcode)] = random_byte & (opcode & 0xFF);
}
void chip8::i_dxyn(uint16_t opcode)
{
    draw_flag = true;
    uint8_t x = v[get_x(opcode)];
    uint8_t y = v[get_y(opcode)];
    int rows = opcode & 0xF;
    v[0xF] = 0;
    for (int i = 0; i < rows; i++)
    {
        uint8_t sp_row = ram[I + i];
        for (int j = 0; j < 8; j++)
        {
            int pixel = (sp_row >> (7 - j)) & 1;
            if (pixel != 0)
            {
                if (gfx[(y + i) % 32][(x + j) % 64] == 1)
                {
                    v[0xF] = 1;
                }
                gfx[(y + i) % 32][(x + j) % 64] ^= 1;
            }
        }
    }
}
void chip8::i_ex9e(uint16_t opcode)
{
}
void chip8::i_exa1(uint16_t opcode)
{
}
void chip8::i_fx07(uint16_t opcode)
{
    v[get_x(opcode)] = dt;
}
void chip8::i_fx0a(uint16_t opcode)
{
    wait_key = get_x(opcode);
}
void chip8::i_fx15(uint16_t opcode)
{
    dt = v[get_x(opcode)];
}
void chip8::i_fx1e(uint16_t opcode)
{
    I += v[get_x(opcode)];
}
void chip8::i_fx29(uint16_t opcode)
{
    I = 0x50 + v[get_x(opcode)] * 5;
}
void chip8::i_fx33(uint16_t opcode)
{
    uint8_t vx = v[get_x(opcode)];
    ram[I + 2] = vx % 10;
    ram[I + 1] = (vx / 10) % 10;
    ram[I] = (vx / 100) % 10;
}
void chip8::i_fx55(uint16_t opcode)
{
    for (int i = 0; i <= get_x(opcode); i++)
    {
        ram[I + i] = v[i];
    }
}
void chip8::i_fx65(uint16_t opcode)
{
    for (int i = 0; i <= get_x(opcode); i++)
    {
        v[i] = ram[I + i];
    }
}
void chip8::execute()
{
    uint16_t opcode = (ram[pc] << 8) | ram[pc + 1];
    uint8_t mn = opcode >> 12;  //nibble mas significativo
    uint8_t ln = opcode & 0xF;  //nibble menos significativo
    uint8_t lb = opcode & 0xFF; //byte menos significativo
    uint16_t k;
    pc = (pc + 2) & 0xFFF;
    if (opcode == 0xEE)
    {
        i_0xee();
        return;
    }
    if (opcode == 0xE0)
    {
        clear_screen();
        return;
    }
    switch (mn)
    {
    case 8:
        k = (uint16_t)(mn << 4) | (uint16_t)ln;
        if (opcodes.find(k) != opcodes.end())
        {
            opcodes[k](opcode);
        }
        break;
    case 0xE:
        k = (uint16_t)lb;
        if (opcodes.find(k) != opcodes.end())
        {
            opcodes[k](opcode);
        }
        break;
    case 0xF:
        k = (uint16_t)(mn << 8) | (uint16_t)lb;
        if (opcodes.find(k) != opcodes.end())
        {
            opcodes[k](opcode);
        }
        break;
    default:
        k = (uint16_t)mn;
        if (opcodes.find(k) != opcodes.end())
        {
            opcodes[k](opcode);
        }
        break;
    }
}
int main()
{
    chip8 ch8;
    static uint8_t ucBuffer[1024];
    uint8_t uc[8];
    int i, j, rc;
    char szTemp[32];
    picoSSOLED oled(OLED_128x64, 0x3c, 0, 0, PICO_I2C, SDA_PIN, SCL_PIN, I2C_SPEED);
    rc = oled.init();
    oled.set_back_buffer(ucBuffer);

    while (1)
    {
        if (ch8.dt)
        {
            ch8.dt--;
        }
        ch8.execute();
        if (ch8.draw_flag)
        {
            oled.fill(0, 1);
            oled.set_contrast(127);
            ch8.draw(oled);
            ch8.draw_flag = false;
        }
    }

    return 0;
} // main
